// Main.ino
#include "Pixel.h"
#include "Renderer.h"
#include "GameBoard.h"
#include "my_que.h"

// Create our game board
GameBoard gameBoard;

int currentCol = 0;
int colSets[5][8] = {
  {0, 1, 2, 3, 4, 5, 6, 7},
  {8, 9, 10, 11, 12 ,13 ,14, 15},
  {16, 17, 18, 19, 20, 21, 22, 23},
  {24, 25, 26, 27, 28, 29, 30, 31},
  {32, 33, 34, 35, 36, 37, 38, 39}
};

// buttons
int oldValueYellow = 0;
int oldValueBlue = 0;
int oldValueRed = 0;
int oldValueGreen = 0;

int newValueYellow;
int newValueBlue;
int newValueRed;
int newValueGreen;

// timing variables
int prevMillis = 0;
int currentMillis = 0;
int tickTimeMillis = 90;
int ticks = 0;

Position snakeHeadPosition = {0, 0};
Position snakeDirection = {1, 0};
MyQue snakeBody;
Position currentFruit = {255, 255};

const uint16_t ledCount = 40;
const uint8_t brightness = 1;

// Create our renderer with hardcoded pins
Renderer renderer(ledCount, brightness);

// Define which pins to use.
const uint8_t dataPin = 2;
const uint8_t clockPin = 3;

// Create an object for writing to the LED strip.
APA102<dataPin, clockPin> ledStrip;

rgb_color colors[40];

void setup() {
  pinMode(10, INPUT);
  pinMode(11, INPUT);
  Serial.begin(115200);
  while (!Serial);
  //Serial.println("start");
}

void loop() {
  currentMillis = millis();
  //Serial.println(currentCol);
  
  ledStrip.write(colors, 40, 31);
  if (currentMillis - prevMillis >= tickTimeMillis) {
    currentCol++;
    if (currentCol > 40) {
      currentCol = 0;
    }

    for(int i = 0; i < 40; i++) {
      if (i < currentCol ) {
        colors[i].blue = 0;
        colors[i].red = 255;
        colors[i].green = 0;
      } else {
        colors[i].red = 0;
        colors[i].green = 0;
        colors[i].blue = 0;  
      }

  }
    
    Serial.println(currentCol);
    prevMillis = currentMillis;
    //gameBoard.clear();
    //updateSnakeHeadPosition(snakeHeadPosition.x + snakeDirection.x, snakeHeadPosition.y + snakeDirection.y);
    //gameBoard.setPixel(snakeHeadPosition.x, snakeHeadPosition.y, true, 0, 255, 0);
  }
  
  //input();
  //renderer.render(gameBoard.getBoard());
  //delay(10);
}

void input() {
  if (input(oldValueYellow, newValueYellow, 10)) {
    snakeDirection.x = -1;
    snakeDirection.y = 0;
  }
  if (input(oldValueBlue, newValueBlue, 11)) {
    snakeDirection.y = -1;
    snakeDirection.x = 0;
  }
  if(input(oldValueRed, newValueRed, 12)) {
    snakeDirection.y = 1;
    snakeDirection.x = 0;
  }
  if(input(oldValueGreen, newValueGreen, 13)) {
    snakeDirection.x = 1;
    snakeDirection.y = 0;
  }
}

bool input(int& oldValue, int newValue, int pin) {
  newValue = digitalRead(pin);
  bool pressed = false;
  
  if (newValue != oldValue) {
    if (newValue == HIGH) {
      pressed = true;
    }
  }

  oldValue = newValue;

  return pressed;
}

void updateSnakeHeadPosition(int8_t x, int8_t y) {
  if (x == -1 || x == 8 || y == -1 || y == 5) return;

  snakeHeadPosition.x = x;
  snakeHeadPosition.y = y;
}